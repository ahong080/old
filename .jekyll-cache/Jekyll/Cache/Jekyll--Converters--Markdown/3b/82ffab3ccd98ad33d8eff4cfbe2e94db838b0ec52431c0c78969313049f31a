I"Ù<p>Here I describe three steps to enable calling Python 3 in Matlab:</p>

<ol>
  <li>Update Matlab path to system path.</li>
  <li>Automate path addition to run every time Matlab starts.</li>
  <li>Update default version of Python interpreter in Matlab.</li>
</ol>

<blockquote>
  <p><code class="highlighter-rouge">&gt;&gt;</code> is the Matlab environment, <code class="highlighter-rouge">$</code> is the Bash shell, and <code class="highlighter-rouge">&gt;&gt;&gt;</code> is the Python environment.</p>
</blockquote>

<h3 id="1-update-matlab-path-to-system-path">1. Update Matlab path to system path</h3>

<p>Make a system call to python from within the Matlab IDE:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt; !python
Python 2.7.10 (default, Oct 23 2015, 19:19:21) 
[GCC 4.2.1 Compatible Apple LLVM 7.0.0 (clang-700.0.59.5)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
</code></pre></div></div>

<p>As expected, macOS defaults <code class="highlighter-rouge">python</code> calls to Python 2; Python 3 must be explicitly called:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt; !python3
/bin/Bash: python3: command not found
</code></pre></div></div>

<p>Uh oh! Matlab does not source your Bash shell resource file. Even though my Bash shell can handle a call to <code class="highlighter-rouge">python3</code>, Matlab cannot.</p>

<p>In Matlab, my system PATH is:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt; unix('echo $PATH')
/usr/bin:/bin:/usr/sbin:/sbin
</code></pre></div></div>

<p>In Bash, my system PATH is different:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ echo $PATH
/Users/erik/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Users/erik/.rvm/bin
</code></pre></div></div>

<p>We need to update Matlabâ€™s PATH using <code class="highlighter-rouge">setenv</code>.</p>

<p>First, I grab my system PATH onto the clipboard so I can paste it later:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ echo $PATH | pbcopy
</code></pre></div></div>

<p>Next, in Matlab I call <code class="highlighter-rouge">setenv</code> and copy my system PATH into the second argument:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt; setenv('PATH', '/Users/erik/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Users/erik/.rvm/bin')
</code></pre></div></div>

<p>Now system calls to <code class="highlighter-rouge">python3</code> work from within Matlab:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt; !python3
Python 3.5.2 (default, Jul 28 2016, 21:28:00) 
[GCC 4.2.1 Compatible Apple LLVM 7.3.0 (clang-703.0.31)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
</code></pre></div></div>

<p>However, this situation only lasts for the current Matlab instance.</p>

<h3 id="2-automate-path-addition-to-run-every-time-matlab-starts">2. Automate path addition to run every time Matlab starts</h3>

<p>To make the addition of the correct path effectively permament, you can add the above code to a <code class="highlighter-rouge">startup.m</code> file <a href="http://www.mathworks.com/help/matlab/ref/startup.html">(read more about this here)</a>. Store it anywhere in the Matlab search path. The script runs every time Matlab is started.</p>

<p>Here are the relevant contents of  my <code class="highlighter-rouge">startup.m</code>:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>% Add my GitHub repos to search path
addpath(genpath('~/repos'));

% Set OS path for this shell instance
setenv('PATH', '/Users/erik/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Users/erik/.rvm/bin');
</code></pre></div></div>

<p>Ideally Matlab would automatically import the system PATH, but unfortunately it does not.</p>

<h3 id="3-update-default-version-of-python-interpreter-in-matlab">3. Update default version of Python interpreter in Matlab</h3>

<p>Finally, if you want to call Python modules within Matlab, you need to change the default version of the Python interpreter.</p>

<p>If you check the version loaded in Matlab, you probably see the macOS default version and executable path to that version:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt; pyversion

       version: '2.7'
    executable: '/usr/bin/python'
       library: '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/libpython2.7.dâ€¦'
          home: '/System/Library/Frameworks/Python.framework/Versions/2.7'
      isloaded: 0
</code></pre></div></div>

<p>Run Python 3 from Bash and find the path to the executable. If you installed Python 3 using Homebrew, your path probably looks like this:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; print(sys.executable)
/usr/local/opt/python3/bin/python3.6
</code></pre></div></div>

<p>Run Matlab and use the path as the argument for <code class="highlighter-rouge">pyversion</code>:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt; pyversion('/usr/local/opt/python3/bin/python3.6');
</code></pre></div></div>

<p>Check that your setting of the new executable path worked by calling <code class="highlighter-rouge">pyversion</code> with no arguments:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt; pyversion

       version: '3.6'
    executable: '/usr/local/opt/python3/bin/python3.6'
       library: '/usr/local/Cellar/python3/3.6.0/Frameworks/Python.framework/Versions/3.6/liâ€¦'
          home: '/usr/local/Cellar/python3/3.6.0/Frameworks/Python.framework/Versions/3.6'
      isloaded: 0
</code></pre></div></div>

<p>Now you have Python 3 goodness within Matlab.</p>
:ET